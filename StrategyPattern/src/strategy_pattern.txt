策略模式
一个类的行为或其算法可以在运行时更改, 这种属于行为型模式
在策略模式中, 我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的context对象, 策略对象改变context对象的执行算法

意图
定义一系列的算法, 把它们 一个个的封装起来, 并且使它们可以相互替换

主要解决
在有多种算法相似的情况下使用if...else所带来的复杂和难以维护

何时使用:
一个系统有很多很多类, 而区分它们的只是它们的直接行为

如何解决:
将算法封装成一个个类, 任意替换

关键代码:
实现统一接口

应用实例:
1.旅行的出游方式
2.Java Awt中的LayoutManager

优点:
1.算法可以自由切换
2.避免使用多重条件判断
3.扩展性良好

缺点:
1.策略类会很多
2.所有策略类会对外暴露

使用场景:
1.策略模式能动态的让一个对象在许多行为中选择一种行为
2.几种算法中选一种

注意:
会类膨胀

实现: 
定义活动的Strategy接口和实现了Strategy接口的实体类
Context是一个使用了某种策略的类
StrategyPattenDemo演示类
演示类使用Context和策略对象来演示Context在它所配置或使用的策略改变时的行为变化


实现:

创建一个定义活动的Strategy接口和实现了Strategy接口的实体策略类
Context是一个使用某种策略的类
StrategyPatternDemo演示类使用Context和策略对象来演示Context在它所配置或使用的策略改变时的行为变化




			<<interface>>				uses				Context							asks		StrategyPatternDemo
			  Strategy			<-----------------------	-strategy: Strategy 		<--------------		+main(): void
			+doOperation(): int								+Context(Strategy strategy):
				|											+executeStrategy(): int
				|											+setStrategy(Strategy strategy): void
				|											+getStrategy(): Strategy
--------------------------------------------------------
|								|						|
| implments						|						| implements
|								|						|
|								|						|
|								|						|
|								|						|
OperationAdd			OperationSubstract			OperationMutiply
+doOperation():int		+doOperation():int			+doOperation():int
			