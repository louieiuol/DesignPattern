模版模式中, 一个抽象类公开定义了执行它的方法的方式/模版. 
它的子类可以按需要重写的方法实现, 但调用将以抽象类中定义的方式进行, 这种类型的设计模式属于行为型模式

意图:
定义一个操作中的算法骨架, 将一些步骤延迟到子类中. 模版方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤

主要解决:
一些方法通用, 却在每一个子类都重新写了这一方法

何时使用:
有一些通用的方法

如何解决:
将这些通用算法抽象出来

关键代码:
在抽象类实现, 其他步骤在子类实现

应用实例:
1. Spring中对Hibernate的支持, 将一些已经定好的方法封装起来, 事务, Session, 不需重复写已经规范好的代码,直接放入实体保存

优点:
1. 封装不变部分, 扩展可变部分
2. 提取公共代码, 便于维护
3. 行为由父类控制, 子类实现

缺点:
1. 每一个不同的实现都需要一个子类来实现, 导致类的个数增加, 使得系统更加庞大

使用场景:
1. 有多个子类共有的方法, 且逻辑相同

注意事项:
1. 防止恶意操作, 方法都加上final

实现:
Game抽象类定义操作
模版方法设置为final, 不能被重写
Cricket和Football是扩展了Game的实体类, 它们重写了抽象类的方法
演示类TemplatePatternDemo


实现:

创建一个定义操作的Game抽象类, 模版方法设置为final, 就不会被重写
Cricket和Football是扩展了Game的实体类
它们重写了抽象类的方法

TemplatePatternDemo演示类使用Game来演示模版模式的用法

					<<abstract>>					uses
						Game					<-----------	TemplatePatternDemo
					+initialize(): void								+main(): void
					+startPlay(): void
					+endPlay(): void
					+play(): void
						|
						|
						|
						|
-----------------------------------------------------
|													|
| extends											| extends
|													|
|													|
|													|
|													|
Cricket											Football
+initialize(): void								+initialize(): void	
+startPlay(): void								+startPlay(): void
+endPlay(): void								+endPlay(): void
+play(): void									+play(): void