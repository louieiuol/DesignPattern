桥接模式

定义: 桥接是用于把抽象化和实现化解耦, 使得2者可以独立变化. 这种设计模式属于结构型模式, 它通过提供抽象化和实现化之间的桥接结构, 来实现2者的解耦

意图:  将抽象部分与实现部分分离, 使它们都能独立的变化

主要解决: 在有多种可能会变化的情况下, 用继承会造成类爆炸的问题, 扩展起来不灵活

何时使用: 实现系统可能有多个角度分类, 每一种角度都可能变化 

如何解决: 把这种多角度分类分离出来, 让它们独立变化, 减少它们之间的耦合

关键代码: 抽象类依赖实现类

应用实例: 墙上的开关, 可以看到的开关是抽象的, 不用管里面具体怎么实现

优点: 1. 抽象和实现的分离
	 2. 优秀的扩展能力
	 3. 实现细节对客户透明
	 
缺点: 增加系统的理解和设计难度, 由于聚合关联关系建立在抽象层, 要求开发者对抽象进行设计与编程

使用场景: 
1.如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性, 避免在两个层次之间建立静态的继承联系,
通过桥接模式可以使它们在抽象层建立一个关联关系
2.对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统
3.一个类存在两个独立变化的维度, 且这两个维度都需要进行扩展


实现:
DrawAPI接口, 实现了DrawAPI接口的实体类RedCircle, GreenCircle
Shape是一个抽象类, 将使用DrawAPI的对象
BridgePatternDemo类使用Shape来画不同颜色的图

		-------------------->  	  Shape		   --------------->  <<interface>> 
		|		使用			 +drawAPI: DrawAPI		使用				DrawAPI
		|					 +Shape(DrawAPI drawAPI): void		+drawCircle(int radius, int x, int y): void
		|					 +abstract draw(): String					^
		|							^									|
		|							| extends							|  implements
		|							|							-------------------			
		|						  Circle						|				   |
		|					-x, y, radius:int					|				   |	
		|					+Circle(DrawAPI drawAPI, 			|				   |
		|				int x, int y, int radius):void		RedCircle			GreenCircle
BridgePatternDemo 			+draw():String				drawCircle(): void   drawCircle(): void
	+main()														｜					｜
		|				使用										｜		使用			｜
		-----------------------------------------------------------------------------