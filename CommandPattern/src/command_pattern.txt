命令模式(Command pattern)是一种数据驱动的设计模式, 它属于行为型模式, 请求以命令的形式包裹在对象中,
 并传给调用对象. 调用寻找可以处理该命令的合适对象, 并把该命令传递给相应的对象, 该对象执行命令
 
 
介绍
意图: 将一个请求封装成一个对象, 从而使您可以用不同的请求对客户进行参数化

主要解决: 在软件系统中, 行为请求者与行为实现者通常是一种紧密耦合的关系, 但某些场合, 比如需要对行为
进行记录, 撤销或重做, 事物处理时, 这种无法抵御变化的紧耦合设计就不太合适

何时使用: 
在某些场合, 比如要对行为进行记录, 撤销/重做, 事物等处理, 对行为请求者和行为实现者进行解耦,
可以将一组行为抽象为对象, 实现2者松耦合

如何解决: 
通过调用者调用接受者执行命令, 顺序: 调用者 -> 命令 -> 接受者

关键代码:
定义3个角色
1. received真正的命令执行对象
2. Command
3. invoker使用命令对象的入口

应用实例:
struts1 中的action 核心控制器ActionServlet只有一个, 相当于invoker,
而模型层的类会随着不同的应用有不同的模型类, 相当于具体的Command

优点: 
1. 降低了系统耦合度
2. 新的命令可以很容易添加到系统中去

缺点:
1. 使用命令模式可能会导致某些系统有过多的具体命令类

使用场景:
认为是命令的地方都可以使用命令模式
1. GUI 中每一个按钮都是一条命令
2. 模拟CMD

注意事项:
系统需要支持命令的撤销Undo和恢复Redo操作, 也可以考虑使用命令模式, 见命令模式扩展

命名模式结构示意图:

								   <<interface>>
			Invoker 				  ICommand
			setCommand()   ---------> Execute()
										^
										|
										|
Client -----> Receiver <------- ConcreteCommand	
			  action() 			    Execute()   ------- receiver.action()
			  
			  
实现:				


	作为请求的类												   调用对象类	
	 Stock 														Broket
	-final name: String	 	使用	  CommandPatternDemo 	使用		orders: List
	-final quantity: int  <-------	+main(): void  ---------->  takeOrder(Order order): void
	+buy(): void												placeOrders(): void
	+sell(): void													^
									命令类							|						
								<<interface>>						|
									Order							|
								+execute(): void--------------------|				
									 |
									 |
									 |
					-------------------------------------
					|									|
					|									| 
					| implements						| implements
					|									|
					|									|		
				BuyStock							 SellStock	
				-stock: stock						-stock(): stock
				+BuyStock(Stock stock)				+SellStock(Stock stock)
				+execute(): void 					+execute(): void