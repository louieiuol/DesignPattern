观察者模式
当对象间存在一对多关系时, 当一个对象被修改时, 则会自动通知依赖它的对象. 观察者模式属于行为型模式

介绍:
意图: 
定义对象间的一种1对多的依赖关系, 当一个对象的状态发生改变时候, 所有依赖于它的对象都得到通知并被自动更新

主要解决:
一个对象状态改变给其他对象通知的问题, 而且要考虑到易用和低耦合,保证高度协作

何时使用:
一个对象的状态发生改变, 所有的依赖对象(观察者对象)都将得到通知, 进行广播通知

如何解决:
使用面向对象技术, 可以将这种依赖关系弱化

关键代码:
在一个抽象类里有一个ArrayList存放观察者们

应用实例:
1. 拍卖时候, 拍卖师观察最高标价, 然后通知给其他竞价者竞价

优点:
1. 观察者和被观察者是抽象耦合
2. 建立一套触发机制

缺点
1. 如果一个被观察者对象有很多的直接和间接观察者的话, 将所有的观察者通知到会花费很多时间
2. 如果在观察者和观察目标之间有循环依赖的话, 观察目标会触发它们之间进行循环调用, 可能导致系统崩溃
3. 观察者模式没有相应的机制让观察者知道所观察的目标是怎么变化的

注意事项:
1. Java 中已经够了对观察者模式的支持类
2. 避免循环引用
3. 如果顺序执行, 某一观察者出错会导致系统卡住, 采用异步处理

	ObserverPatternDemo
	+main(): void
		|
		|
		|
		|
<<abstract>>				uses			Subject
Observer			<--------------------  -observers: List<Observer> 
+subject: Subject						   -state: int
+update(): void							   +getState(): int
		^								   +setState(): void 	
		|								   +attach(): void
		|								   +notifyAllObservers(): void
		|
		|
------------------------------------------------
|						|						|
|extends				|						| extends
|						|						|
|						|						|
|						|						|
|						|						|
BinaryObserver		OctalObserver			HexaObserver
+subject: Subject	+subject: Subject		+subject: Subject
+update: void		+update(): void			+update(): void
