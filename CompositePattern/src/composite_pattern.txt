组合模式 
又叫部分整体模式, 是用于把相似的对象当作一个单一的对象, 组合模式依据树形结构来组合对象, 用来表示部分以及整体层次, 
这种类型的设计属于结构型模式, 它创建了对象的树形结构.

这种模式创建了一个包含自己对象组的类，该类提供了修改相同对象组的方式

意图: 将对象组合成树形结构以表示“部分-整体”的层次结构. 复合模式使得用户对单一对象和组合对象使用具有一致性
主要解决: 它在我们树形结构的问题中, 模糊了简单元素和复杂元素的概念, 客户程序可以像简单元素一样来处理复杂元素, 从而使得客户与复杂元素的内部结构解耦
何时使用: 1.表示对象的部分-整体层次结构
		 2. 希望用户忽略组合对象与单个对象的不同, 用户将统一的使用组合结构中的所有对象
		 
如何解决: 树枝和叶子实现统一的接口, 树枝内部组合该接口
关键代码: 树枝内部组合该接口, 并且含有内部属性List, 里面放Component

应用实例: 
1. 算数表达式包括操作数, 操作符和另外一个数,其中操作符也可以是操作数, 操作符和另外的数

优点: 
1. 高层模块调用简单
2. 节点自由增加

缺点: 
1在使用组合模式时候， 叶子和树枝的声明都是实现类, 而不是接口, 违反了依赖导致原则

使用场景: 部分-整体场景 树形菜单, 文件/文件夹管理

注意事项: 定义时为具体类


实现:

Employee, 该类被当作组合模型类
CompositePatternDemo类使用Employee类来添加部门层次结构, 并打印所有员工

Employee 
-name: String
-dept: String 
-salary: int
-subordinates: List<Employee>         <-----------------   CompositePatternDemo
-Employee()														+main():void
+add(): void
+remove(): void
+getSubordinates: List<Employee> 
+toString():String
		 