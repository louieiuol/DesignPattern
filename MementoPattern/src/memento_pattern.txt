备忘录模式MementoPattern
保存一个对象的某个状态, 以便在适当的时候恢复对象, 属于行为型模式

意图:
在不破坏封装性的前提下, 捕获一个对象的内部状态, 并在该对象之外保存这个状态

主要解决:
恢复到原有状态

如何解决:
通过一个备忘录类专门存储对象状态

关键代码:
客户不与备忘录类耦合, 与备忘录管理类耦合

应用实例:
1. 游戏存档
2. 数据的rollback

优点:
1. 给用户提供了一种可以恢复状态的机制, 可以使用户能比较方便的回到某个状态
2. 实现信息的封装, 用户不需要关心状态的保存细节

缺点:
消耗资源

使用场景:
1.需要保存恢复相关状态的场景
2.提供一个可回滚的操作

注意事项:
1.为了符合demeter原则, 还要增加一个管理备忘录的类
2.为了节约内存, 可使用原型+备忘录模式


					   uses										
MementoPatternDemo ------------>   Originator				----------------->    Memento            
+main(): void					 -state:String									-state: String
								 +setState():void								+Memento()
								 +getState():String								+getState(): String
								 +saveStateToMemento(): Memento						^
								 +getStateFromMemento(): void						|
								 													|
								 													|
								 													|
								 													|
								 													|
								 												CareTaker
								 												-mementoList: List<Memento> 
								 												+add(): void
								 												+get(): Memento	