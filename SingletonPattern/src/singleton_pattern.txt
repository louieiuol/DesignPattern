单例模式

属于创建者模式

这种模式设计到一个单一的类, 该类负责创建自己的对象, 同时确保只有单个对象被创建.
这个类提供了一种访问其唯一对象的方式, 可以直接访问, 不需要实例化该类的对象.

注意:
1. 单例只能有一个实例
2. 单例必须自己创建自己的唯一实例
3. 单例类必须给所有其他对象提供这一实例

介绍:

意图: 保证一个类仅有一个实例, 并提供一个访问它的全局访问点
主要解决: 一个全局使用的类频繁的创建与销毁
何时使用: 控制实例数目, 节省资源
如何解决: 判断这个系统是否已经有这个单例, 有则返回, 否则创建
关键代码: 构造函数是私有的 

应用实例: 
1. 一个班只有一个班主任
2. Windows系统是多进程多线程的, 操作一个文件时候, 就会有多个进程或者线程同时操作一个文件的现象
, 所有文件的处理必须通过唯一的实例来进行
3.一些设备管理器, 如电脑打印机管理器
4. 生产唯一的序列号
5. WEB中的计数器, 不用每次刷新都在数据库存一起, 用单例先缓存起来
6. I/O和数据库连接

优点:
1. 减少了内存的开销
2. 避免对资源的多重占用

缺点:
1. 没有接口, 不能继承
2. 与单一指责原则冲突

SingletonPatternDemo
	+main(): void
		|
		|
		| 获取唯一的对象   ----------------
		|								|
		|								|
	SingleObject						|  返回	
	-instance: SingleObject				|
	-SingleObject()						|
	+getInstance(): SingleObject --------
	+showMessage(): void

