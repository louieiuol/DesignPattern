访问者模式 Visitor Pattern中 我们使用了一个访问者类, 它改变了元素类执行算法. 通过这种方式, 元素的执行算法可以随着访问者改变而改变,
这种类型的设计模式属于行为型模式, 根据模式, 元素对象已接受访问者对象, 这样访问者对象就可以处理元素对象上的操作

介绍:
意图:
主要将数据结构与数据操作分离

主要解决:
稳定的数据结构和易变的操作耦合问题

何时使用:
需要对一个对象结构中的对象进行很多不同的并且不想关的操作, 而需要避免让这些操作污染这些对象的类, 使用访问者模式将这些封装到类中

如何解决: 
在被访问的类里加一个对外接待访问者的接口

关键代码:
在数据基础类里面有一个方法接受访问者, 将自身引用传入访问者

优点:
1.单一职责原则
2.优秀的扩展性
3.灵活性

缺点:
1.对象结构中对象对应的类很少改变,但经常需要在此对象结构上定义新的操作
2.需要对一个对象结构中的对象进行很多不同且并不相关的操作, 而需要避免避免这些操作污染这些对象的类, 也不希望在增加新操作时修改这些类

注意事项:
访问者可以对功能进行统一, 可以做报表, UI, 拦截器与过滤器

实现:

定义接受操作的ComputerPart接口
Keyboard, Mouse, Monitor和Computer是实现了ComputerPart接口的实体类
定义一个ComputerPartVisitor, 它定义了访问者类的操作, Computer使用实体访问者来执行相应的动作
演示类VisitorPatternDemo


<<interface>> 						implements
ComputerPartVisitor				<--------------  	ComputerPartDisplayVisitor		-------------
+visit(Computer computer): void						+visit(Computer computer): void				|
+visit(Mouse mouse): void							+visit(Mouse mouse): void					|
+visit(Keyboard keyboard): void						+visit(Keyboard keyboard): void				|
+visit(Monitor monitor): void						+visit(Monitor monitor): void				|
																								|	uses
																								|---------------- VisitorPatternDemo
																								|					+main(): void
																								|
																								|
																								|
																								|
																								|
															<<interface>>			-------------
															ComputerPart
															+accept():void
																	|
																	|
																	|
								---------------------------------------------------------------------
								|							|					|					|
								|							|					|					|
								|							|					|					|
								|							|					|					|
								|							|					|					|
							Computer					Keyboard			  Mouse				Monitor
							-Parts[] computerPart		+accept(): void		+accept(): void		+accept(): void
							+Computer()
							+accept(): void
															
