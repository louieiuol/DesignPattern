原型模式 Prototype pattern

定义: 原型模式适用于创建重复的对象, 同时又能保证性能, 这种类型的设计模式属于创建型模式, 
他提供了一种创建对象的最佳方式

这种模式是实现了一个原型接口, 该接口用于创建当前对象的克隆. 当直接创建对象的代价比较大时
, 则采用这种模式. 例如, 一个对象需要在一个高代价的数据库操作之后被创建. 我们可以缓存该对象
, 在下一个请求返回它的克隆, 在需要的时候更新数据库, 以此来减少数据库的调用.

介绍

意图: 
用原型实例指定创建对象的种类, 并且通过拷贝这些原型创建新的对象

主要解决:
在运行期建立和删除原型 

何时使用:
1.当一个系统应该独立于它的产品创建, 构成和表示时
2.当实例化的类是在运行时刻指定时, 例如动态装载
3.为了避免创建一个产品类层次平行的工厂类层次时
4.当一个类的实例只能有几个不同状态组合中的一种时. 建立相应的数目原型并克隆它们
可能比每次用合适的状态手工实例化该类更方便一些

如何解决:
利用已有的原型对象, 快速生成和原型对象一样的实例

关键代码:
1. 实现克隆操作, 在Java继承Cloneable, 重写clone()
2. 原型模式同样适用于隔离类对象和使用者和具体类型之间的耦合关系

应用实例:
1. 细胞分裂
2. Java 中 Object clone()方法

优点:
1. 性能提高 
2. 逃避构造函数的约束 

缺点:
1. 配备克隆方法需要对类进行通盘考虑
2. 必须实现Cloneable接口

适用场景:
1. 资源优化场景
2. 类初始化需要消耗非常多的资源
3. 性能安全要求场景
4. 通过new 产生一个对象非常需要非常繁琐的数据准备或者访问权限
5. 一个对象多个修改者
6. 一个对象需要提供给其他对象访问, 而各个调用者可能都需要修改其值时候, 可以考虑使用原型模式拷贝
多个对象供调用者使用
7. 原型一般搭配工厂模式一起出现, 通过clone的方法创建一个对象, 然后由工厂方法提供给调用者

注意
原型是浅拷贝



						------------ Cloneable
						| implements
						|
						|
						Shape
					-id: String									PrototypePatternDemo
					+abstract draw(): void			克隆			+main(): void		
					+abstract getType(): String   <----------  			|
					+getId(): String									|
					+setId(String id): void								|  访问
					+clone(): Object									|
						/		|		 \							ShapeCache
		extends		   /		|		  \     extends				-shapeMap: HashMap
			  		  /			|		   \						+getShape(String id): shape
					 /			|		    \						+loadCache(): void
		Circle				Rectangle            Square
		-type: String       -type: String       -type: String
		+draw(): void		+draw(): void		+draw(): void
		+getType(): String  +getType(): String  +getType(): String 
					