建造者模式

使用多个简单对象一步步构成一个复杂的对象,这种模式属于创建模式,它也提供了一种创建对象的最佳方式

介绍 
意图: 将一个复杂的构建与其表示相分离, 使得同样的构建过程可以创建不同的表示
主要解决: 主要解决在软件系统中, 有时候面临着一个复杂对象的创建工作, 其通常由各个部分的子对象
用一定的算法构成, 由于需求变化, 这个对象的各个部分经常面临着剧烈变化, 但是将它们组合在一起的
算法却相对稳定

何时使用: 一些基本的部件不会变, 而其组合经常变化的时候
如何解决: 将变与不变分离开
关键代码: 建造者: 创建和提供实例, 导演: 管理建造出来的实例的依赖关系
应用实例: 1. 去肯德基, 汉堡/可乐/薯条产品不变,套餐组合是变化的
2. Java中StringBuilder

优点:
1. 建造者独立, 易扩展
2. 便于控制细节风险

缺点: 
1.产品必须有共同点, 范围有限制
2.如内部变化复杂, 会有很多建造类

使用场景:
1. 需要生成的对象具有复杂的内部结构
2. 需要生成的对象内部属性本身相互依赖

注意事项: 
工厂模式区别: 建造者模式更加关注与零件装配的顺序

实例: 


Item									Meal 							MealBuilder
								-items: ArrayList<Item>				
+name(): String		  使用		+addItem(Item item): String		创建	  	+prepareVegMeal(): Meal 
+packing(): Packing <------  	+showItems(): Packing      <--------	+prepareNonVegMeal(): Meal
+price(): float 				+getCost(): float
	^																		^
	|------------------------------------------------------------			|
	|						implements							|			|
	| implements												|			|
	|															|			|
	|															|	BuilderPatternDemo
	|							Packing							|	+main(): void
	|						+pack(): String						|
	|						  /		     \						|
	|						 / implements \						|
	(abstract) 使用			/			   \  使用(abstract) 	|
	Burger--------------> Wrapper		Bottle  <-------- ColdDrink   
	+pack();          	  +pack():		+pack(): 			+pack();
		|			        |				|	                |
		|  extends          |				|	extends	        |
		|			        |				|			        |
	VegBurger	    ChickenBurger		Pepsi		           Coke
	+price();		  +price();			+price();	          +price();
	+name();		   +name();			+name();	          +name();
	