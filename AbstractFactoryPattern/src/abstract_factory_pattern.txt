抽象工厂模式

是围绕一个超级工厂创建其他工厂, 该超级工厂又称为其他工厂的工厂, 这种类型的设计模式属于创建型模式, 它提供了一种创建对象的最佳方式.
在抽象工厂模式中, 接口是负责创建一个相关对象的工厂, 不需要显式的指定它们的类, 每个生成的工厂都能按照工厂模式提供对象

意图: 提供一个创建一系列相关或相互依赖对象的接口,而无需指定它们的类
主要解决: 主要解决接口选择的难题
何时使用: 系统的产品又多于一个的产品族, 而系统至消费其中某一族的产品
如何解决: 在一个产品族里面, 定义多个产品
关键代码: 在一个工厂里面聚合多个同类产品
应用实例: 套装: 一个衣柜放上衣, 一个衣柜放裤子, 一个衣柜放鞋子
优点: 当一个产品族的多个对象被设计成一起工作时, 它能保证客户端口始终只使用同一产品族中的对象
缺点: 产品族扩展非常困难, 要增加一个系列的某一产品, 既要在抽象的里加代码, 又要在具体类加代码
使用场景: 1. QQ秀换套装, 2. 生成不同操作系统的程序
注意: 产品族难扩展， 产品等级容易扩展


实现:

Shape和Color接口和实现这些接口的实体类
抽象工厂AbstractFactory
工厂类ShapeFactory和ColorFactory都extends AbstractFactory
工厂生成器类FactoryProducer
AbstractFactoryPatternDemo类使用FactoryProducer来获取AbstractFactory对象, 它向AbstractFactory传递形状信息Shape
以便获取它所需对象的类型, 同时它还向AbstractFactory传递颜色信息Color, 以便获取它所需对象的类型



                      创建生成器类                                   使用
AbstractFactory     <----------- FactoryProducer                 <-------  AbstractFactoryPatternDemo
+getShape():Shape                +getFactory():AbstractFactory             +main():void
+getColor():Color
       ^
       |
       |             继承抽象类
       |---------------------------------------------｜
       |                                             ｜
       |                                             ｜
 ShapeFactory                                   ColorFactory
 +getShape():Shape                              +getColor(): Color
       |                                              |
       |创建工厂类                                      | 创建工厂类
       |                                              |
  <<interface>>                                  <<interface>>
      Shape										     Color
      +draw():void                                +draw():void 
       |											   ｜
       |											   |
       |        									   |
 ------------------------------------            -------------------------------
 |         			|				|            |              |				|	
 |implements		|				|            ｜             |				|implements
 |					|				|            ｜             |				|
 Circle			Square			Rectangle       Red           Green			   Blue
 +draw():void   +draw():void    +draw():void  +fill():void   +fill(): void   +fill(): void
   
