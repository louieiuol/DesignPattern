中介者模式(MediatorPattern) 降低多个对象和类之间的通信复杂性, 这种模式提供了一个中介类, 该类通常处理不同类之间的通信, 并支持松耦合, 使代码易于维护,属于行为型模式

意图:
用一个中介对象来封装一系列的对象交互, 中介者使各对象不需要显式的相互引用从而使其松耦合, 而且可以独立的改变它们之间的交互

主要解决:
对象与对象之间存在大量的关联关系, 这样势必会导致系统的结构变得很复杂, 同时若一个对象发生改变, 我们也需要跟踪与之相关联的对象, 同时做出相应的处理

何时使用:
多个类相互耦合形成了网状结构

如何解决:
将上述网状结构分离为星型结构

关键代码:
对象之间的通信封装到一个类单独处理

应用实例:
1. 中国加入WTO之前是各个国家相互贸易,结构复杂, 现在是各个国家通过WTO来贸易
2. 机场调度系统
3. MVC框架

优点:
1. 降低了类的复杂度, 将 1对多转化成了1对1
2. 各个类之间解耦
3. 符合Demeter 原则

缺点:
1.中介者也会变得庞大

使用场景:
1.系统中对象之间存在比较复杂的引用关系, 导致它们之间的依赖关系结构混乱而且难以复用该对象
2.想通过一个中间类来封装多个类的行为, 又不想生成太多的子类

注意事项:
 不应该在职责混乱时使用
 
实现:

ChatRoom聊天室类
User用户类, 使用ChatRoom来分享它们的消息
MediatorPatternDemo演示类使用User对象来显示它们之间的通信


						uses								uses
MediatorPatternDemo  ------------->   User			    --------------> ChatRoom
+main(): void 						-name: String						+showMessage(): void
									+User(): void
									+getName(): void
									+setName(): void
									+sendMessage(): void