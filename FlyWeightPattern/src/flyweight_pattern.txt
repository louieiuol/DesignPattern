享元模式(FlyweightPattern) 主要用于减少创建对象的数量, 以减少内存占用和提高性能. 这种类型的设计模式属于结构型模式, 
他提供了减少对象数量从而改善应用所需的对象结构方式. 

享元模式尝试重用现有的同类对象, 如果未找到匹配的对象, 则创建新的对象. 

介绍

意图: 运用共享技术有效的支持大量细颗粒度的对象

主要解决: 在有大量对象时, 有可能会造成内存溢出, 我们把其中共同的部分抽象出来, 如果有相同的业务请求, 直接返回在内存中已有的对象, 避免重新创建

何时使用: 
1. 系统中有大量对象
2. 这些对象消耗大量内存
3. 这些对象的状态大部分可以外部化
4. 这些对象可以按照内蕴状态分为很多组, 当把外蕴对象从对象中剔除来时, 每一组对象都可以用一个对象来代替
5. 系统不依赖这些对象身份, 这些对象是不可分辨的

如何解决: 
用唯一标识码来判断, 如果在内存中有, 则返回这个唯一标识码所标识的对象

关键代码: 
用HashMap储存这些对象

应用实例:
1. Java中的String, 如果有则返回, 如果没有则创建一个字符串保存在字符串缓存池里
2. 数据库的数据池

优点
大大减少对象的创建, 降低系统内存, 使效率提高

缺点:
提高了系统的复杂度, 需要分离出外部状态和内部状态, 并且外部状态具有固有化的性质, 不应该随着内部状态变化而变化, 否则会造成系统的混乱

使用场景:
1. 系统有大量相似对象
2. 需要缓冲池的场景

注意事项: 
1. 注意划分外部状态和内部状态, 否则可能会引起线程安全问题
2. 这些类必须有一个工厂对象加以控制


实现:
Shape接口和实现了Shape接口的实体类Circle
定义工厂类ShapeFactory
ShapeFactory有一个Circle的HashMap, 其中key是Circle对象的颜色, 无论何时接收到请求, 都会返回特定颜色的圆value
ShapeFactory检查它HashMap中的Circle对象, 如果找到则返回, 否则将创建一个存储在HashMap中以备后续使用的新对象,并把该对象返回到客户端
FlyWeightPatternDemo类使用ShapeFactory来获取Shape对象. 它将向ShapeFactory传递信息, 以便获取它所需对象的颜色

				  <<interface>>						FlyWeightPatternDemo
				  +draw(): void						+main(): void
						^							-getRandomColor(): String
						|                     		-getRandomX(): int
						|							-getRandomY(): int
						|									|
						|									|
						|									|	访问
					 Circle	                           		|
				  -x,y,radius: int  						|
				  -color: String                        ShapeFactory
				  +Circle()					  创建     +circleMap: HashMap
				  +setX(): void				<-------  +getCircle(): Shape 
				  +setY(): void							
				  +setRadius(): void
				  +draw(): void
				  		